export default class ActivityDetection {
    private packets;
    private packetCounter;
    private ema;
    private last_len;
    private q_c;
    private q_base;
    private q_u_world;
    private pre_data_std;
    private last_position;
    private last_plank_angle;
    private getWindowSize;
    getPreviousSampleCount: () => number;
    private globalConstants;
    private repCounterConstants;
    putGlobalConstant: ([name, value]: [string, number]) => void;
    putRepCalculationConstant: ([name, value]: [string, any]) => void;
    pushData: (data: number[]) => void;
    getRepCounterIntervalMilliseconds: () => number;
    getAngleMeasurementIntervalMilliseconds: () => number;
    getPacketCount: () => number;
    getSampleCount: () => number;
    getRawData: () => {
        count: number;
        packet_counter: number;
        delta_time: number;
        accel_X: number;
        accel_Y: number;
        accel_Z: number;
        gyro_X: number;
        gryo_Y: number;
        gyro_Z: number;
        mag1_X: number;
        mag1_Y: number;
        mag1_Z: number;
        mag2_X: number;
        mag2_Y: number;
        mag3_Z: number;
    }[];
    calculateReps: () => any;
    private acf;
    private emaCalc;
    private range;
    private detectPeaks;
    private zeroCrossings;
    initializePlankParameters: () => void;
    isInPlankPosition: (t: number) => any;
    private calcAngle;
}
